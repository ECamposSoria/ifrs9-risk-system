# IFRS9 Risk System - Kubernetes Namespace
# Namespace isolation for IFRS9 application components

apiVersion: v1
kind: Namespace
metadata:
  name: ifrs9-risk-system
  labels:
    name: ifrs9-risk-system
    environment: "${ENVIRONMENT}"
    project: ifrs9-risk-system
    managed-by: kubernetes
    version: "1.0"
  annotations:
    description: "IFRS9 credit risk management system namespace"
    contact: "data-team@bank.com"
    compliance: "IFRS9-compliant"
    security.policy: "restricted"

---
# Resource Quota for the namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: ifrs9-resource-quota
  namespace: ifrs9-risk-system
  labels:
    environment: "${ENVIRONMENT}"
    component: resource-management
spec:
  hard:
    # Compute resources
    requests.cpu: "20"
    requests.memory: "40Gi"
    limits.cpu: "40"
    limits.memory: "80Gi"
    
    # Storage resources
    requests.storage: "1Ti"
    persistentvolumeclaims: "20"
    
    # Object counts
    pods: "50"
    services: "20"
    secrets: "30"
    configmaps: "30"
    ingresses.networking.k8s.io: "10"
    
    # Service accounts
    count/serviceaccounts: "10"

---
# Network Policy for namespace isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ifrs9-network-policy
  namespace: ifrs9-risk-system
  labels:
    environment: "${ENVIRONMENT}"
    component: security
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  
  # Ingress rules
  ingress:
  - from:
    # Allow traffic from same namespace
    - namespaceSelector:
        matchLabels:
          name: ifrs9-risk-system
    # Allow traffic from ingress controllers
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    # Allow traffic from monitoring namespace
    - namespaceSelector:
        matchLabels:
          name: monitoring
  
  # Egress rules
  egress:
  - to: []  # Allow all egress (can be restricted further)
    ports:
    # HTTPS for external APIs
    - protocol: TCP
      port: 443
    # HTTP for internal services
    - protocol: TCP
      port: 80
    # Database connections
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 3306
    # DNS
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Pod Security Policy (if PSP is enabled)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: ifrs9-psp
  namespace: ifrs9-risk-system
  labels:
    environment: "${ENVIRONMENT}"
    component: security
spec:
  privileged: false
  allowPrivilegeEscalation: false
  
  # Required security contexts
  requiredDropCapabilities:
    - ALL
  
  # Volume restrictions
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  
  # Host restrictions
  hostNetwork: false
  hostIPC: false
  hostPID: false
  
  # User/group restrictions
  runAsUser:
    rule: 'MustRunAsNonRoot'
  runAsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  
  # File system restrictions
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: false
  
  # Security context
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535

---
# Service Account for IFRS9 applications
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ifrs9-service-account
  namespace: ifrs9-risk-system
  labels:
    environment: "${ENVIRONMENT}"
    component: security
  annotations:
    # Google Service Account annotation for Workload Identity
    iam.gke.io/gcp-service-account: "ifrs9-gke-sa@${PROJECT_ID}.iam.gserviceaccount.com"
automountServiceAccountToken: true

---
# Role for IFRS9 applications within namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ifrs9-risk-system
  name: ifrs9-role
  labels:
    environment: "${ENVIRONMENT}"
    component: security
rules:
# ConfigMaps and Secrets access
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]

# Pod and service access
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]

# Metrics access
- apiGroups: [""]
  resources: ["pods/metrics", "services/metrics"]
  verbs: ["get"]

# Events access for logging
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create"]

---
# Role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ifrs9-role-binding
  namespace: ifrs9-risk-system
  labels:
    environment: "${ENVIRONMENT}"
    component: security
subjects:
- kind: ServiceAccount
  name: ifrs9-service-account
  namespace: ifrs9-risk-system
roleRef:
  kind: Role
  name: ifrs9-role
  apiGroup: rbac.authorization.k8s.io

---
# Limit Range for resource constraints
apiVersion: v1
kind: LimitRange
metadata:
  name: ifrs9-limit-range
  namespace: ifrs9-risk-system
  labels:
    environment: "${ENVIRONMENT}"
    component: resource-management
spec:
  limits:
  # Container limits
  - type: Container
    default:
      cpu: "1"
      memory: "2Gi"
    defaultRequest:
      cpu: "100m"
      memory: "256Mi"
    max:
      cpu: "4"
      memory: "8Gi"
    min:
      cpu: "50m"
      memory: "128Mi"
  
  # Pod limits
  - type: Pod
    max:
      cpu: "8"
      memory: "16Gi"
    min:
      cpu: "100m"
      memory: "256Mi"
  
  # PVC limits
  - type: PersistentVolumeClaim
    max:
      storage: "100Gi"
    min:
      storage: "1Gi"