# IFRS9 Risk System - API Deployment
# Main API service for IFRS9 risk calculations and data access

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ifrs9-api
  namespace: ifrs9-risk-system
  labels:
    app: ifrs9-api
    component: api
    environment: "${ENVIRONMENT}"
    version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  
  selector:
    matchLabels:
      app: ifrs9-api
      component: api
  
  template:
    metadata:
      labels:
        app: ifrs9-api
        component: api
        environment: "${ENVIRONMENT}"
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    
    spec:
      serviceAccountName: ifrs9-service-account
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      
      # Init container for database migration/setup
      initContainers:
      - name: init-db
        image: "${DOCKER_REGISTRY}/ifrs9-init:${IMAGE_TAG}"
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: ifrs9-secrets
              key: database-url
        - name: ENVIRONMENT
          value: "${ENVIRONMENT}"
        command:
        - sh
        - -c
        - |
          echo "Initializing database schema..."
          python /app/init_db.py
          echo "Database initialization complete"
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
      
      containers:
      - name: ifrs9-api
        image: "${DOCKER_REGISTRY}/ifrs9-api:${IMAGE_TAG}"
        ports:
        - containerPort: 8080
          name: http-api
          protocol: TCP
        - containerPort: 8081
          name: http-metrics
          protocol: TCP
        
        # Environment variables
        env:
        - name: ENVIRONMENT
          value: "${ENVIRONMENT}"
        - name: PORT
          value: "8080"
        - name: METRICS_PORT
          value: "8081"
        - name: LOG_LEVEL
          value: "INFO"
        - name: PYTHONPATH
          value: "/app"
        
        # Configuration from ConfigMap
        envFrom:
        - configMapRef:
            name: ifrs9-config
        
        # Secrets
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: ifrs9-secrets
              key: database-url
        - name: BIGQUERY_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: ifrs9-secrets
              key: bigquery-credentials
        - name: API_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: ifrs9-secrets
              key: api-secret-key
        
        # Resource requirements
        resources:
          requests:
            cpu: "500m"
            memory: "1Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        
        # Startup probe for slow startup applications
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        
        # Volume mounts
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: credentials-volume
          mountPath: /app/credentials
          readOnly: true
      
      # Volumes
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: "1Gi"
      - name: cache-volume
        emptyDir:
          sizeLimit: "2Gi"
      - name: logs-volume
        emptyDir:
          sizeLimit: "5Gi"
      - name: config-volume
        configMap:
          name: ifrs9-config
      - name: credentials-volume
        secret:
          secretName: ifrs9-secrets
          items:
          - key: bigquery-credentials
            path: bigquery-credentials.json
          - key: vertex-ai-credentials
            path: vertex-ai-credentials.json
      
      # Node affinity for better distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ifrs9-api
              topologyKey: kubernetes.io/hostname
      
      # Tolerations for node taints
      tolerations:
      - key: "ifrs9-dedicated"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ifrs9-api-hpa
  namespace: ifrs9-risk-system
  labels:
    app: ifrs9-api
    component: api
    environment: "${ENVIRONMENT}"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ifrs9-api
  
  minReplicas: 2
  maxReplicas: 10
  
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ifrs9-api-pdb
  namespace: ifrs9-risk-system
  labels:
    app: ifrs9-api
    component: api
    environment: "${ENVIRONMENT}"
spec:
  selector:
    matchLabels:
      app: ifrs9-api
      component: api
  maxUnavailable: 1