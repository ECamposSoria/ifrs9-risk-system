name: IFRS9 CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docker/**'
      - 'charts/**'
      - '.github/workflows/ci-cd.yaml'
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      GAR_LOCATION: ${{ vars.GCP_REGION }}
      REPO: ifrs9
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Auth to GCP
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDP }}
          service_account: ${{ secrets.GCP_WORKLOAD_SA }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${GAR_LOCATION}-docker.pkg.dev --quiet

      - name: Build & push agent images
        run: |
          set -euo pipefail
          REGISTRY="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPO}"
          agents=(orchestrator validator rules-engine ml-models integrator reporter data-generator debugger)
          for a in "${agents[@]}"; do
            docker build -t "$REGISTRY/$a:${IMAGE_TAG}" -f "docker/agents/$a/Dockerfile" .
            docker push "$REGISTRY/$a:${IMAGE_TAG}"
            # latest tag for main branch
            if [[ "${GITHUB_REF##*/}" == "main" ]]; then
              docker tag "$REGISTRY/$a:${IMAGE_TAG}" "$REGISTRY/$a:latest"
              docker push "$REGISTRY/$a:latest"
            fi
          done

      - name: Helm lint (agents)
        uses: azure/setup-helm@v4
      - run: helm lint charts/ifrs9-agents

      - name: Helm lint (ops)
        run: helm lint charts/ifrs9-ops

  argo-notify:
    if: github.ref == 'refs/heads/main'
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: ArgoCD sync (optional)
        if: ${{ env.ARGOCD_SERVER && secrets.ARGOCD_AUTH_TOKEN }}
        env:
          ARGOCD_SERVER: ${{ vars.ARGOCD_SERVER }}
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          curl -k -H "Authorization: Bearer ${ARGOCD_AUTH_TOKEN}" -X POST "${ARGOCD_SERVER}/api/v1/applications/ifrs9-agents/sync"
          curl -k -H "Authorization: Bearer ${ARGOCD_AUTH_TOKEN}" -X POST "${ARGOCD_SERVER}/api/v1/applications/ifrs9-ops/sync"

