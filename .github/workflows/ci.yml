# IFRS9 Risk System - Continuous Integration Pipeline
# Comprehensive CI pipeline with testing, security, and quality gates

name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

# Environment variables
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Global permissions
permissions:
  contents: read
  security-events: write
  packages: write
  pull-requests: write

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev
    
    - name: Run Black (code formatting)
      run: poetry run black --check --diff src/ tests/
    
    - name: Run isort (import sorting)
      run: poetry run isort --check-only --diff src/ tests/
    
    - name: Run flake8 (linting)
      run: poetry run flake8 src/ tests/
    
    - name: Run mypy (type checking)
      run: poetry run mypy src/
    
    - name: Run bandit (security linting)
      run: poetry run bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev,test
    
    - name: Run unit tests with coverage
      run: |
        poetry run pytest tests/unit/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --junitxml=test-results.xml \
          -v
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
          coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: codecov-${{ matrix.python-version }}

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ifrs9_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ifrs9_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev,test
    
    - name: Set up test database
      env:
        DATABASE_URL: postgresql://ifrs9_test:test_password@localhost:5432/ifrs9_test
      run: |
        poetry run python tests/setup_test_db.py
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://ifrs9_test:test_password@localhost:5432/ifrs9_test
        ENVIRONMENT: test
      run: |
        poetry run pytest tests/integration/ \
          --cov=src \
          --cov-append \
          --cov-report=xml \
          --junitxml=integration-test-results.xml \
          -v
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          integration-test-results.xml
          coverage.xml

  # Job 4: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev
    
    - name: Run Safety (dependency vulnerability check)
      run: poetry run safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Run Semgrep (SAST)
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif
      if: always()
    
    - name: Upload safety results
      uses: actions/upload-artifact@v3
      with:
        name: safety-report
        path: safety-report.json

  # Job 5: Docker Build and Scan
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/production/Dockerfile.api
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          COMMIT_SHA=${{ github.sha }}
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 6: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install --with dev,test
    
    - name: Generate test data
      run: |
        poetry run python src/generate_data.py \
          --num_loans 10000 \
          --output_file test_data.csv
    
    - name: Run performance tests
      run: |
        poetry run pytest tests/performance/ \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          -v
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '150%'
        fail-on-alert: true

  # Job 7: Code Quality Analysis
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download test results
      uses: actions/download-artifact@v3
      with:
        name: test-results-3.11
        path: ./test-results/
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=${{ github.repository_owner }}_ifrs9-risk-system
          -Dsonar.organization=${{ github.repository_owner }}
          -Dsonar.python.coverage.reportPaths=./test-results/coverage.xml
          -Dsonar.python.xunit.reportPath=./test-results/test-results.xml
          -Dsonar.sources=src/
          -Dsonar.tests=tests/
          -Dsonar.python.version=3.11

  # Job 8: Dependency Check
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry
    
    - name: Export requirements
      run: poetry export -f requirements.txt --output requirements.txt --with dev
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'ifrs9-risk-system'
        path: '.'
        format: 'ALL'
        out: 'dependency-check-report'
        args: >
          --enableRetired
          --enableExperimental
          --prettyPrint
    
    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: dependency-check-report

  # Job 9: Infrastructure Tests
  infrastructure-tests:
    name: Infrastructure Tests
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'deploy/terraform/') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive deploy/terraform/
    
    - name: Terraform Init
      run: terraform init -backend=false
      working-directory: deploy/terraform
    
    - name: Terraform Validate
      run: terraform validate
      working-directory: deploy/terraform
    
    - name: Run tfsec (Terraform security scanner)
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: true
        tfsec_args: --format sarif --out tfsec-results.sarif deploy/terraform/
    
    - name: Upload tfsec results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: tfsec-results.sarif

  # Job 10: Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [
      code-quality,
      unit-tests,
      integration-tests,
      security-scan,
      docker-build,
      dependency-check,
      infrastructure-tests
    ]
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Check | ${{ needs.dependency-check.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Infrastructure Tests | ${{ needs.infrastructure-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "✅ Main branch - Ready for staging deployment" >> $GITHUB_STEP_SUMMARY
        else
          echo "🔄 Feature branch - Merge to main when ready" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow